import sys
from unittest.mock import ANY, AsyncMock, MagicMock, call, patch
from aiohttp import web_response

import pytest

with patch('wazuh.common.wazuh_uid'):
    with patch('wazuh.common.wazuh_gid'):
        sys.modules['wazuh.rbac.orm'] = MagicMock()
        import wazuh.rbac.decorators

        del sys.modules['wazuh.rbac.orm']

        from api.controllers.vulnerability_controller import (
            get_vulnerability_agent, parse_api_param, remove_nones_to_dict)
        from wazuh import vulnerability
        from wazuh.tests.util import RBAC_bypasser

        wazuh.rbac.decorators.expose_resources = RBAC_bypasser


@pytest.mark.asyncio
@patch('api.configuration.api_conf', return_value={'intervals': {'request_timeout': 10}})
@pytest.mark.parametrize('mock_str_value, mock_bool_value, mock_request',
                         [(ANY, True, {'token_info': {'rbac_policies': 'value1'}})])
async def test_get_vulnerability_agent(mock_intervals, mock_str_value, mock_bool_value, mock_request):
    with patch('api.controllers.vulnerability_controller.DistributedAPI', side_effect=AsyncMock) as mock_dapi:
        with patch('api.controllers.vulnerability_controller.raise_if_exc', return_value={}) as mock_exc:
            f_kwargs = {
                'agent_list': [mock_str_value],
                'offset': 0,
                'limit': mock_str_value,
                'sort': parse_api_param(None, 'sort'),
                'search': parse_api_param(None, 'search'),
                'select': mock_str_value,
                'q': '',
                'distinct': mock_str_value,
                'filters': {
                    'architecture': mock_str_value,
                    'cve': mock_str_value,
                    'name': mock_str_value,
                    'version': mock_str_value
                }
            }
            calls = [call(f=vulnerability.get_agent_cve,
                          f_kwargs=remove_nones_to_dict(f_kwargs),
                          request_type='distributed_master',
                          is_async=False,
                          wait_for_complete=mock_bool_value,
                          logger=ANY,
                          rbac_permissions=mock_request['token_info']['rbac_policies']
                          )
                     ]
            result = await get_vulnerability_agent(mock_request,
                                                   pretty=mock_bool_value,
                                                   wait_for_complete=mock_bool_value,
                                                   agent_id=mock_str_value,
                                                   limit=mock_str_value,
                                                   select=mock_str_value,
                                                   distinct=mock_str_value,
                                                   architecture=mock_str_value,
                                                   cve=mock_str_value,
                                                   name=mock_str_value,
                                                   version=mock_str_value)
            mock_dapi.assert_has_calls(calls)
            mock_exc.assert_called_once()
            assert isinstance(result, web_response.Response)
